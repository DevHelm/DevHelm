# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']


    #####
    ## Parthenon user services
    #####
    Parthenon\User\Factory\EntityFactory: '@App\User\Entity\EntityFactory'
    Parthenon\User\Repository\UserRepositoryInterface: '@App\Repository\UserRepository'
    Parthenon\User\Repository\TeamRepositoryInterface: '@App\Repository\TeamRepository'
    Parthenon\User\Notification\MessageFactory: '@App\User\Notification\MessageFactory'
    Parthenon\User\Repository\TeamInviteCodeRepositoryInterface: '@App\Repository\TeamInviteCodeRepository'

    Parthenon\Billing\Factory\EntityFactoryInterface: '@App\Billing\EntityFactory'

    App\Repository\UserRepository:
        arguments:
            $entityRepository: '@app.repository.orm.user'
    app.repository.orm.user:
        class: App\Repository\Orm\UserRepository

    App\Repository\TeamRepository:
        arguments:
            $entityRepository: '@app.repository.orm.team'
    app.repository.orm.team:
        class: App\Repository\Orm\TeamRepository

    App\Repository\TeamInviteCodeRepository:
        arguments:
            $entityRepository: '@app.repository.orm.team_invite_code'
    app.repository.orm.team_invite_code:
        class: App\Repository\Orm\TeamInviteCodeRepository

    App\Repository\AgentRepository:
        arguments:
            $entityRepository: '@app.repository.orm.agent'
    app.repository.orm.agent:
        class: App\Repository\Orm\AgentRepository


    parthenon.user.repository.forgot_password_code_repository:
        class: Parthenon\User\Repository\ForgotPasswordCodeRepository
        arguments:
            - '@App\Repository\Orm\ForgotPasswordCodeRepository'

    parthenon.user.repository.orm.invite_code_repository_doctrine: '@App\Repository\Orm\InviteCodeRepository'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # --- ComControl domain repositories ---
    # Agent
    App\Repository\AgentRepositoryInterface: '@App\Repository\AgentRepository'
    App\Repository\AgentRepository:
        arguments:
            $entityRepository: '@app.repository.orm.agent'
    app.repository.orm.agent:
        class: App\Repository\Orm\AgentRepository

    # Lead
    App\Repository\LeadRepositoryInterface: '@App\Repository\LeadRepository'
    App\Repository\LeadRepository:
        arguments:
            $entityRepository: '@app.repository.orm.lead'
    app.repository.orm.lead:
        class: App\Repository\Orm\LeadRepository

    # ApiKey
    App\Repository\ApiKeyRepositoryInterface: '@App\Repository\ApiKeyRepository'
    App\Repository\ApiKeyRepository:
        arguments:
            $entityRepository: '@app.repository.orm.api_key'
    app.repository.orm.api_key:
        class: App\Repository\Orm\ApiKeyRepository

    # Task
    App\Repository\TaskRepositoryInterface: '@App\Repository\TaskRepository'
    App\Repository\TaskRepository:
        arguments:
            $entityRepository: '@app.repository.orm.task'
    app.repository.orm.task:
        class: App\Repository\Orm\TaskRepository

    # Feedback
    App\Repository\FeedbackRepositoryInterface: '@App\Repository\FeedbackRepository'
    App\Repository\FeedbackRepository:
        arguments:
            $entityRepository: '@app.repository.orm.feedback'
    app.repository.orm.feedback:
        class: App\Repository\Orm\FeedbackRepository

    # Question
    App\Repository\QuestionRepositoryInterface: '@App\Repository\QuestionRepository'
    App\Repository\QuestionRepository:
        arguments:
            $entityRepository: '@app.repository.orm.question'
    app.repository.orm.question:
        class: App\Repository\Orm\QuestionRepository


    Redis:
        class: Redis
        calls:
            - connect: ['%env(REDIS_HOST)%']

    # Jira Integration Services
    jira.configuration:
        class: JiraCloud\Configuration\ArrayConfiguration
        arguments:
            - jiraHost: '%env(JIRA_HOST)%'
              jiraUser: '%env(JIRA_USERNAME)%'
              personalAccessToken: '%env(JIRA_PERSONAL_ACCESS_TOKEN)%'
              jiraLogEnabled: false

    JiraCloud\JiraClient:
        arguments:
            $configuration: '@jira.configuration'

    App\Service\JiraTicketProvider:
        arguments:
            $jiraClient: '@JiraCloud\JiraClient'
            $targetStatus: '%env(JIRA_TARGET_STATUS)%'

    App\Interface\TicketProviderInterface: '@App\Service\JiraTicketProvider'
